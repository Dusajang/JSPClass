package days04;

import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.doit.domain.DeptVO;
import org.doit.domain.EmpVO;

import com.util.DBConn;

@WebServlet("/days04/empsearch.htm")
public class EmpSearch extends HttpServlet {
    private static final long serialVersionUID = 1L;

    public EmpSearch() {
        super();
    }

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        System.out.println("> EmpSearch.doGet()...");

        // 1. 부서정보 dlist
        List<DeptVO> dlist = new ArrayList<>();
        String sql = " SELECT deptno, dname, loc FROM dept ";

        try (Connection conn = DBConn.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql);
             ResultSet rs = pstmt.executeQuery()) {

            while (rs.next()) {
                int deptno = rs.getInt("deptno");
                String dname = rs.getString("dname");
                String loc = rs.getString("loc");
                dlist.add(new DeptVO(deptno, dname, loc));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        // 2. 잡 정보 jlist
        List<String> jlist = new ArrayList<>();
        sql = " SELECT DISTINCT job FROM emp ORDER BY job ASC ";

        try (Connection conn = DBConn.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql);
             ResultSet rs = pstmt.executeQuery()) {

            while (rs.next()) {
                jlist.add(rs.getString("job"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        // 3. 부서+잡 검색된 사원 정보 elist
        String pdeptno = null;
        String pjob = null;

        try {
            String[] pdeptnos = request.getParameterValues("deptno");
            if (pdeptnos != null) {
                pdeptno = String.join(", ", pdeptnos); // "10, 20, 40"
            }
            String[] pjobs = request.getParameterValues("job");
            if (pjobs != null) {
                pjob = String.join("', '", pjobs); // "'ANALYST',  'MANAGER'"
                pjob = String.format("'%s'", pjob);
            }
        } catch (Exception e) {
            System.out.println("> EmpSearch.doGet() - [3]");
            e.printStackTrace();
        }

        sql = " SELECT empno, ename, job, mgr, to_char(hiredate, 'yyyy-MM-dd') hiredate, sal, comm, deptno FROM emp ";

        if (pdeptno != null) {
            sql += String.format(" WHERE deptno IN (%s) ", pdeptno);
        }
        if (pjob != null) {
            sql += String.format(" %s job IN (%s) ", pdeptno != null ? "AND" : "WHERE", pjob);
        }
        sql += " ORDER BY deptno ASC";

        System.out.println("[3] sql : " + sql);

        List<EmpVO> elist = new ArrayList<>();

        try (Connection conn = DBConn.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql);
             ResultSet rs = pstmt.executeQuery()) {

            while (rs.next()) {
                int empno = rs.getInt("empno");
                String ename = rs.getString("ename");
                String job = rs.getString("job");
                int mgr = rs.getInt("mgr");
                Date hiredate = rs.getDate("hiredate");
                double sal = rs.getDouble("sal");
                double comm = rs.getDouble("comm");
                int deptno = rs.getInt("deptno");

                elist.add(new EmpVO(empno, ename, job, mgr, hiredate, sal, comm, deptno));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        // 4. 포워딩
        request.setAttribute("dlist", dlist);
        request.setAttribute("jlist", jlist);
        request.setAttribute("elist", elist);

        // 선택된 값들 설정하여 JSP에서 유지되도록 하기
        List<Integer> selectedDepts = new ArrayList<>();
        if (pdeptno != null) {
            for (String dept : request.getParameterValues("deptno")) {
                selectedDepts.add(Integer.parseInt(dept));
            }
        }
        request.setAttribute("selectedDepts", selectedDepts);

        List<String> selectedJobs = new ArrayList<>();
        if (pjob != null) {
            for (String job : request.getParameterValues("job")) {
                selectedJobs.add(job);
            }
        }
        request.setAttribute("selectedJobs", selectedJobs);

        String path = "/days04/ex02_empsearch_jstl.jsp";
        RequestDispatcher dispatcher = request.getRequestDispatcher(path);
        dispatcher.forward(request, response);
    }

    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doGet(request, response);
    }
}
