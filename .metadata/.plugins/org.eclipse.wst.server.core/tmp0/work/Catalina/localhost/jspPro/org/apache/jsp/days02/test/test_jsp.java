/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.93
 * Generated at: 2024-10-16 23:38:46 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.days02.test;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Date;
import java.util.Iterator;
import com.util.DBConn;
import org.doit.domain.DeptVO;
import org.doit.domain.EmpVO;
import java.util.ArrayList;
import java.sql.ResultSet;
import java.sql.PreparedStatement;
import java.sql.Connection;

public final class test_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(12);
    _jspx_imports_classes.add("org.doit.domain.DeptVO");
    _jspx_imports_classes.add("java.sql.Connection");
    _jspx_imports_classes.add("java.util.Iterator");
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("org.doit.domain.EmpVO");
    _jspx_imports_classes.add("java.sql.ResultSet");
    _jspx_imports_classes.add("com.util.DBConn");
    _jspx_imports_classes.add("java.sql.PreparedStatement");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

    Connection conn = null;
    PreparedStatement pstmt = null;
    ResultSet rs = null;
    
    ArrayList<DeptVO> deptList = new ArrayList<>();
    ArrayList<EmpVO> empList = new ArrayList<>();
    
    int deptno;
    String dname, loc;
    DeptVO deptVO = null;
    EmpVO empVO = null;
    
    try {
        conn = DBConn.getConnection();
        
        String sql1 = "SELECT * FROM dept";
        pstmt = conn.prepareStatement(sql1);
        rs = pstmt.executeQuery();
        
        while (rs.next()) {
            deptno = rs.getInt("deptno");
            dname = rs.getString("dname");
            loc = rs.getString("loc");
            
            deptVO = new DeptVO().builder().deptno(deptno).dname(dname).loc(loc).build();
            deptList.add(deptVO);
        }
        
        String[] deptnoArr = request.getParameterValues("deptno");
        
        if (deptnoArr != null && deptnoArr.length > 0) {
            StringBuilder sqlBuilder = new StringBuilder(
                "SELECT empno, ename, job, mgr, " +
                "TO_CHAR(hiredate,'yyyy-MM-dd') hiredate, sal, comm, deptno " +
                "FROM emp WHERE "
            );
            
            for (int i = 0; i < deptnoArr.length; i++) {
                sqlBuilder.append("deptno = ?");
                if (i < deptnoArr.length - 1) {
                    sqlBuilder.append(" OR ");
                }
            }
            
            sqlBuilder.append(" ORDER BY deptno ASC");
            
            pstmt = conn.prepareStatement(sqlBuilder.toString());
            
            for (int i = 0; i < deptnoArr.length; i++) {
                pstmt.setInt(i + 1, Integer.parseInt(deptnoArr[i]));
            }
            
            rs = pstmt.executeQuery();
            
            while (rs.next()) {
                int empno = rs.getInt("empno");
                String ename = rs.getString("ename");
                String job = rs.getString("job");
                int mgr = rs.getInt("mgr");
                Date hiredate = rs.getDate("hiredate");
                double sal = rs.getDouble("sal");
                double comm = rs.getDouble("comm");
                deptno = rs.getInt("deptno");
                
                empVO = new EmpVO().builder()
                    .empno(empno).ename(ename).job(job).mgr(mgr)
                    .hiredate(hiredate).sal(sal).comm(comm).deptno(deptno)
                    .build();
                empList.add(empVO);
            }
        }
    } catch (Exception e) {
        e.printStackTrace();
    } finally {
        try {
            if (rs != null) rs.close();
            if (pstmt != null) pstmt.close();
            if (conn != null) DBConn.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<head>\r\n");
      out.write("   <meta charset=\"UTF-8\">\r\n");
      out.write("   <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("   <link rel=\"stylesheet\" href=\"https://code.jquery.com/ui/1.14.0/themes/base/jquery-ui.css\">\r\n");
      out.write("   <script src=\"https://code.jquery.com/jquery-3.7.1.js\"></script>\r\n");
      out.write("   <script src=\"https://code.jquery.com/ui/1.14.0/jquery-ui.js\"></script>\r\n");
      out.write("   <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\r\n");
      out.write("   <title>Document</title>\r\n");
      out.write("<style>\r\n");
      out.write("    table {\r\n");
      out.write("        border: 1px solid black;\r\n");
      out.write("        border-collapse: collapse;\r\n");
      out.write("    }\r\n");
      out.write("    th, td {\r\n");
      out.write("        border: 1px solid black;\r\n");
      out.write("        padding: 5px;\r\n");
      out.write("    }\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<div>\r\n");
      out.write("  <xmp class=\"code\">\r\n");
      out.write("    \r\n");
      out.write("  </xmp>\r\n");
      out.write("  \r\n");
      out.write("<select id=\"deptno\" name=\"deptno\">\r\n");
      out.write("    <option>부서를 선택하세요.</option>\r\n");
      out.write("        ");

            Iterator<DeptVO> deptIterator = deptList.iterator();
            while (deptIterator.hasNext()) {
                DeptVO dept = deptIterator.next();
                deptno = dept.getDeptno();
                dname = dept.getDname();
        
      out.write("\r\n");
      out.write("        <option value=\"");
      out.print( deptno );
      out.write('"');
      out.write('>');
      out.print( dname );
      out.write("</option>\r\n");
      out.write("    ");

        }
    
      out.write("\r\n");
      out.write("</select>\r\n");
      out.write("\r\n");
      out.write("<h2></h2>\r\n");
      out.write("<table id=\"tblDept\">\r\n");
      out.write("    <thead>\r\n");
      out.write("        <tr>\r\n");
      out.write("            <th><input type=\"checkbox\" class=\"all\"> 모두 선택</th>\r\n");
      out.write("            <th>empno</th>\r\n");
      out.write("            <th>ename</th>\r\n");
      out.write("            <th>job</th>\r\n");
      out.write("            <th>mgr</th>\r\n");
      out.write("            <th>hiredate</th>\r\n");
      out.write("            <th>sal</th>\r\n");
      out.write("            <th>comm</th>\r\n");
      out.write("            <th>deptno</th>\r\n");
      out.write("        </tr>\r\n");
      out.write("    </thead>\r\n");
      out.write("    <tbody>\r\n");
      out.write("    ");
 
	if (empList.isEmpty()) {
	
      out.write("\r\n");
      out.write("	    <tr>\r\n");
      out.write("	        <td colspan=\"9\">사원이 존재하지 않습니다.</td>\r\n");
      out.write("	    </tr>\r\n");
      out.write("	");
 
	} else { 
	    Iterator<EmpVO> ir = empList.iterator();
	    while (ir.hasNext()) {
	        EmpVO vo = ir.next(); 
	
      out.write("\r\n");
      out.write("	    <tr>\r\n");
      out.write("	        <td><input type=\"checkbox\" id=\"ck");
      out.print( vo.getEmpno() );
      out.write("\" value=\"");
      out.print( vo.getEmpno() );
      out.write("\"></td>\r\n");
      out.write("	        <td>");
      out.print( vo.getEmpno() );
      out.write("</td>\r\n");
      out.write("	        <td>");
      out.print( vo.getEname() );
      out.write("</td>\r\n");
      out.write("	        <td>");
      out.print( vo.getJob() );
      out.write("</td>\r\n");
      out.write("	        <td>");
      out.print( vo.getMgr() );
      out.write("</td>\r\n");
      out.write("	        <td>");
      out.print( vo.getHiredate() );
      out.write("</td>\r\n");
      out.write("	        <td>");
      out.print( vo.getSal() );
      out.write("</td>\r\n");
      out.write("	        <td>");
      out.print( vo.getComm() );
      out.write("</td>\r\n");
      out.write("	        <td>");
      out.print( vo.getDeptno() );
      out.write("</td>\r\n");
      out.write("	    </tr>\r\n");
      out.write("	");

	    }
	}
	
      out.write("\r\n");
      out.write("    </tbody>\r\n");
      out.write("    <tfoot>\r\n");
      out.write("        <tr>\r\n");
      out.write("           <td colspan=\"8\">\r\n");
      out.write("              <button id=\"submit\">확인</button>\r\n");
      out.write("           </td>\r\n");
      out.write("        </tr>\r\n");
      out.write("     </tfoot>\r\n");
      out.write("</table>\r\n");
      out.write("<br>\r\n");
      out.write("<br>\r\n");
      out.write("      <a href=\"javascript:history.back()\">HOme</a>\r\n");
      out.write("  \r\n");
      out.write("     \r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("    $(\"#deptno\").on(\"change\", function (event) {\r\n");
      out.write("        let deptno = $(this).val();\r\n");
      out.write("        location.href = `test.jsp?deptno=${deptno}`;\r\n");
      out.write("    });\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("    \r\n");
      out.write("    const allCkb = document.querySelector(\".all\");\r\n");
      out.write("    const ckbs = document.querySelectorAll(\"#tblDept > tbody input[id^='ck']\");\r\n");
      out.write("\r\n");
      out.write("    \r\n");
      out.write("    allCkb.onchange = function () {\r\n");
      out.write("    	//console.log(\"allCkb\");\r\n");
      out.write("        for (let i = 0; i < ckbs.length; i++) {\r\n");
      out.write("            ckbs[i].checked = this.checked;\r\n");
      out.write("        }\r\n");
      out.write("    };\r\n");
      out.write("\r\n");
      out.write("    \r\n");
      out.write("    for (let i = 0; i < ckbs.length; i++) {\r\n");
      out.write("        ckbs[i].onclick = function () {\r\n");
      out.write("        	//console.log(\"ckbs\");\r\n");
      out.write("            let isCkbsAllchecked = true;\r\n");
      out.write("\r\n");
      out.write("            for (let j = 0; j < ckbs.length; j++) {\r\n");
      out.write("                if (!ckbs[j].checked) {\r\n");
      out.write("                    isCkbsAllchecked = false;\r\n");
      out.write("                    break;\r\n");
      out.write("                }\r\n");
      out.write("            }\r\n");
      out.write("            allCkb.checked = isCkbsAllchecked;\r\n");
      out.write("        };\r\n");
      out.write("    }\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("	const empnoArr = [];\r\n");
      out.write("$(\"#submit\").on(\"click\", function () {\r\n");
      out.write("	$(\"input[type=checkbox]:checked\").each(function (index, element) {\r\n");
      out.write("		let empno = element.value;\r\n");
      out.write("		empnoArr.push(`empno=${empno}`);\r\n");
      out.write("	});\r\n");
      out.write("	//alert(empnoArr.value);\r\n");
      out.write("	//console.log(\"submit\")\r\n");
      out.write("	location.href = `test01_ok.jsp?${empnoArr.join('&')}`;\r\n");
      out.write("	//console.log(`test01_ok.jsp?${empnoArr.join('&')}`);\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("  \r\n");
      out.write("  \r\n");
      out.write("  \r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
